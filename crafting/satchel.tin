#class {satchel} {open}

#VAR {crafting[quality][specific]} {{1}{legendary}{2}{superior}{3}{good}{4}{average}{5}{poor}};
#VAR {crafting[quality][transmute]} {{4}{superior}{3}{good}{2}{average}{2}{poor}};
#VAR {crafting[quality][all]} {{best}{worst}{all}{any}${crafting[quality][specific]}};
#VAR {crafting[limit][default]} {10};
#VAR {transmute[limit]} {{1}{100}  {2}{4}  {3}{3}  {4}{2}  {5}{3}};

#ALIAS {stc}
{
  #ACTION {^%%*%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|} 
  {
    #FORMAT {crafting[ingredient]} {%l} {%%1};
    #VAR {satchel[$crafting[ingredient]][total]} {%%4};
    #VAR {satchel[$crafting[ingredient]][subtotal][1]} {%%7};
    #VAR {satchel[$crafting[ingredient]][subtotal][2]} {%%10};
    #VAR {satchel[$crafting[ingredient]][subtotal][3]} {%%13};
    #VAR {satchel[$crafting[ingredient]][subtotal][4]} {%%16};
    #VAR {satchel[$crafting[ingredient]][subtotal][5]} {%%19};
    .CleanIngredient $crafting[ingredient];
  };

  #ACTION {You have %%d/%%d items in your satchel.}
  {
    #UNACTION {^%%*%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|};
    #UNACTION {You have %%d/%%d items in your satchel.};
  };

  #SEND {!stashlist %0};
};

#ALIAS {.CleanIngredient}
{
  #REGEX {%0} {{fragment|essence}}
  {    
    #FOREACH {$crafting[quality][specific][]} {i}
    {
      #IF {$satchel[%0][subtotal][$i] >= 5}
      {
        #NOP get the subtotal for the quality we're going to assemble
        #VAR {sub} {$satchel[%0][subtotal][$loop]};
        #MATH {assembleTimes} {$sub / 5};
        #SEND {!unstash2 5 $crafting[quality][specific][$i] %0};
        #SEND {!assemble %0};
        #SEND {!stash all};
      };
    };
}
{
    #IF {$crafting[limit][%0] > 0}
    {
      #VAR {crafting[limit][current]} {$crafting[limit][%0]};
    }
    {
      #VAR {crafting[limit][current]} {$crafting[limit][default]};
    }
    #MATH {crafting[delta]} {$satchel[%0][total] - $crafting[limit][current]};
    #IF {$crafting[delta] > 0} 
    {
      #$crafting[delta] {!unstash2 worst %0};
      #VAR {satchel[%0][total]} {$crafting[limit][current]};
    };
  };
};

#NOP copied from the stc alias above and renamed to call .TransmuteIngredient instead of .CleanIngredient
#NOP otherwise it's identical
#ALIAS {stt}
{
  #ACTION {^%%*%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|} 
  {
    #FORMAT {crafting[ingredient]} {%l} {%%1};
    #VAR {satchel[$crafting[ingredient]][total]} {%%4};
    #VAR {satchel[$crafting[ingredient]][subtotal][1]} {%%7};
    #VAR {satchel[$crafting[ingredient]][subtotal][2]} {%%10};
    #VAR {satchel[$crafting[ingredient]][subtotal][3]} {%%13};
    #VAR {satchel[$crafting[ingredient]][subtotal][4]} {%%16};
    #VAR {satchel[$crafting[ingredient]][subtotal][5]} {%%19};
    .TransmuteIngredient $crafting[ingredient];
  };

  #ACTION {You have %%d/%%d items in your satchel.}
  {
    #UNACTION {^%%*%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|%%s%%d%%s|};
    #UNACTION {You have %%d/%%d items in your satchel.};
  };

  #SEND {!stashlist %0};
};

#NOP Called alias for transmuting crafting mats.  This relies on the new #VAR transmute[limit] listed at the top of the script.
#NOP It takes the subtotals starting with the lowest quality and determines how many times it needs to transmute them, adding that
#NOP to the subtotal for the next higher quality so that they get included in the calculation for that quality.
#ALIAS {.TransmuteIngredient}
{
  #LOOP {5} {3} loop 
  {
    #math {nextq} {$loop - 1};
    #VAR {sub} {$satchel[%0][subtotal][$loop]};
    #VAR {limit} {$transmute[limit][$loop]};

    #IF {$sub >= $limit} {
      #math {xmuteTimes} {$sub / $limit};
      #math {satchel[%0][subtotal][$nextq]} {$satchel[%0][subtotal][$nextq] + $xmuteTimes};
      #$xmuteTimes {!unstash2 $limit $crafting[quality][specific][$loop] %0};
      #SEND {!transmute all %0 quality to $crafting[quality][specific][$nextq]};
      #SEND {!stash all};
    };
  }
};

#alias {setlimit} {
	#showme setting the crafting limit for %1 from $crafting[limit][%1] to %2;
	#VAR {crafting[limit][%1]} {%2};
}

#variable {minemats} {
	{copper}{{1}{copper ore}{2}{copper shards}{3}{aquamarine}{4}{aquamarine dust}{5}{morganite}{6}{morganite dust}{7}{tiger's eye}{8}{tiger's eye dust}}
	{bronze}{{1}{bronze ore}{2}{bronze shards}{3}{cat's eye}{4}{cat's eye dust}{5}{garnet}{6}{garnet dust}{7}{eye of flame}}
	{iron}{{1}{iron ore}{2}{iron shards}{3}{garnet}{4}{garnet dust}{5}{alexandrite}{6}{alexandrite dust}{7}{eye of frost}}
	{steel}{{1}{steel ore}{2}{steel shards}{3}{cat's eye}{4}{cat's eye dust}{5}{eye of frost}{6}{eye of flame}}
	{silver}{{1}{silver ore}{2}{silver shards}{3}{pyrite}{4}{pyrite dust}{5}{tourmaline}{6}{tourmaline dust}{7}{beryl}{8}{beryl dust}{9}{eye of earth}{10}{roan's tears}}
	{gold}{{1}{gold ore}{2}{gold shards}{3}{amethyst}{4}{amethyst dust}{5}{topaz}{6}{topaz dust}{7}{happy ed's tears}{8}{eye of air}}
	{mithril}{{1}{mithril ore}{2}{mithril shards}{3}{heliodor}{4}{heliodor dust}{5}{hematite}{6}{hematite dust}{7}{core of flame}}
	{titanium}{{1}{titanium ore}{2}{titanium shards}{3}{peridot}{4}{peridot dust}{5}{core of frost}}
	{ebon}{{1}{ebon ore}{2}{ebon shards}{3}{heliodor}{4}{heliodor dust}{5}{peridot}{6}{peridot dust}{7}{core of earth}}
	{adamantium}{{1}{adamantium ore}{2}{adamantium shards}{3}{pearl}{4}{pearl dust}{5}{core of air}}
	{obsidian}{{1}{obsidian ore}{2}{obsidian shards}{3}{opal}{4}{opal dust}{5}{pearl}{6}{pearl dust}{7}{ghoti's tears}}
	{nethernium}{{1}{nethernium ore}{2}{nethernium shards}{3}{opal}{4}{opal dust}{5}{ghoti's tears}{6}{star of flame}}
	{voidstone}{{1}{voidstone ore}{2}{voidstone shards}{3}{diamond}{4}{diamond dust}{5}{shansabyk's tears}{6}{star of frost}}
	{phasemetal}{{1}{phasemetal ore}{2}{phasemetal shards}{3}{emerald}{4}{emerald dust}{5}{sapphire}{6}{sapphire dust}{7}{star of earth}{8}{star of air}}
	{chaostone}{{1}{chaostone ore}{2}{chaostone shards}{3}{ruby}{4}{ruby dust}{5}{emerald}{6}{emerald dust}{7}{sapphire}{8}{sapphire dust}{9}{cancer's tears}}
};

#NOP pull all non-legendary mats for an ore type and put them in a box
#alias {matbox} {
	!keep all;
	#foreach {$minemats[%1][%*]} {name} {
		!us all poor $name;
		!us all average $name;
		!us all good $name;
		!us all superior $name;
	}
	!put all in box;
};	

#NOP check the amounts of each mat for a specific ore type
#alias {sg} {#foreach {$minemats[%1][%*]} {name} {!st $name}};

#NOP check to see what ore(s) a mining mat comes from
#alias {mlist} {
	#foreach {$minemats[]} {level} {
		#foreach {$minemats[$level][]} {index} {
			#if {"$minemats[$level][$index]" == "%*%1%*"}{
				#showme $level:$minemats[$level][$index];
			}
		}
	}
};



#class {satchel} {close}
