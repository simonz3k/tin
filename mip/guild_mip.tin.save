#NOP guild mip file

#NOP ***** Guild Stats Line 1/2 *****

#NOP	MIP sends 2 different gline feeds.  the individual guild aliases
#NOP	This alias switches on the $guild variable set in your character file 
#ALIAS {.mipProcessGline} {
    #VAR {mip[gline][%1]} {%2};
    #VAR {temp} {};

    #NOP GUILD SPECIFIC GLINE PROCESSING;
    #IF {"%2" != ""} {
        #SWITCH {"$guild"} {
			#CASE {"changeling"}	{.mipProcessGlineChangeling {%1}};
			#CASE {"elemental"}	{.mipProcessGlineElemental {%1}};
			#CASE {"gentech"}	{.mipProcessGlineGentech {%1}};
			#CASE {"jedi"}		{.mipProcessGlineJedi {%1}};
			#CASE {"juggernaut"}	{.mipProcessGlineJuggernaut {%1}};
			#CASE {"knight"}	{.mipProcessGlineKnight {%1}};
			#CASE {"necromancer"}	{.mipProcessGlineNecromancer {%1}};
			#CASE {"psicorp"}	{.mipProcessGlinePsicorp {%1}};
			#CASE {"sii"}		{.mipProcessGlineSii {%1}}
        }

    }
}

#ALIAS {.mipProcessGlineJedi} {
    #IF {%1 == 1} {
        #unvar my[gline1];
        #REGEX {$mip[gline][1]} {Chrg:  %d\%} {#VAR {my[gline1][wcharge]}   {&1};};
    };
    #ELSEIF {%1 == 2} {
        #unvar my[gline2];
        #REGEX {$mip[gline][2]} {Deflection UP} {#VAR {my[gline2][fd]} {FD}};
        #REGEX {$mip[gline][2]} {Deflect XP:%s%d.%d\%} {#VAR {my[gline2][fdp]} {&2.&3}};
        #REGEX {$mip[gline][2]} {TK} {#VAR {my[gline2][tk]} {TK}};
        #REGEX {$mip[gline][2]} {Controlling Pain} {#VAR {my[gline2][cpain]} {CP}};
        #REGEX {$mip[gline][2]} {Dodging} {#VAR {my[gline2][dodge]} {D}};
        #REGEX {$mip[gline][2]} {GFS} {#VAR {my[gline2][gfs]} {GFS}};
        #REGEX {$mip[gline][2]} {LFS} {#VAR {my[gline2][lfs]} {LFS}};
        #REGEX {$mip[gline][2]} {RP} {#VAR {my[gline2][rpoison]} {RP}};
        #REGEX {$mip[gline][2]} {RS} {#VAR {my[gline2][rstun]} {RS}};
        #REGEX {$mip[gline][2]} {EM} {#VAR {my[gline2][emet]} {EM}};
        #REGEX {$mip[gline][2]} {Dissipating Shields} {#VAR {my[gline2][diss]} {Dis Sh}};
        #REGEX {$mip[gline][2]} {Dissipating Attacks} {#VAR {my[gline2][diss]} {Dis Atk}};
        #REGEX {$mip[gline][2]} {issipating Control Pain} {#VAR {my[gline2][diss]} {Dis CP}};
        #REGEX {$mip[gline][2]} {Accelerated Healing} {#VAR {my[gline2][diss]} {Dis Heal}};
        #REGEX {$mip[gline][2]} {Dissipating Force} {#VAR {my[gline2][diss]} {Dis Force}};
    };
    #ELSE {
        #ECHO {<171> Invalid Gline Number <088>}
    }
}

#ALIAS {.mipProcessGlineChangeling} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {Chaos Flux: %d/%d} {
			#VAR {my[relinquish][current]}	{&1};
			#VAR {my[relinquish][reset]}	{&2}
		};
		#REGEX {$mip[gline][1]} {{Density|Homeostasis|Mitosis|Morphogenesis|Resilience}: %d.%d\%} {
			#VAR {my[skill][name]}		{&1};
			#VAR {my[skill][current]}	{&2.&3}
		};
		#REGEX {$mip[gline][1]}	{\[{FF|IL}\(%d\): %d.%d\%\]<099>  \[%D\]} {
			#VAR {my[ff][current]}		{&3.&4};
			#VAR {my[form]}			{&5}
		}
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]}	{\[Bioplasts: %d\]} {#VAR {my[bioplasts]}	{&1}}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlineElemental} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {Emit<099> : <%d>%d}	{#VAR {my[emit][level]}		{&2}};
		#REGEX {$mip[gline][1]} {Equipollent}		{#VAR {my[equip]}		{on}}
								{#VAR {my[equip]}		{off}};
		#REGEX {$mip[gline][1]} {Form<099>: <869>%w<099>\(<819>%d<099>\)}		{
			#VAR {my[form][type]}		{&1};
			#VAR {my[form][size]}		{&2}
		};
		#REGEX {$mip[gline][1]} {Rating<099>: <819>%d<099>}			{#VAR {my[rating]}		{&1}}
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]} {Stones/Waves/Shrouds<099>: <%d>%d<099>/<%d>%d<099>/<%d>%d<099>\(%d\%\)}
			#VAR {my[blasts]		{&2};
			#VAR {my[waves]}		{&4};
			#VAR {my[shrouds]}		{&6};
			#VAR {my[reset]}		{&7}
		};
		#REGEX {$mip[gline][2]} {G2N: <%d>%d<099>}		{#VAR {my[g2n]}			{&2}}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlineGentech} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {CPC:<%d>%d<099>/%d G2N:%d(%d\%) RC[%d] Reset(<%d>%d\%<099>) TS:%d/%d E-TS:%d} {
			#VAR {gentech[cpc][current]}	{&2};
			#VAR {gentech[cpc][max]}	{&3};
			#VAR {gentech[gxp][tnl]}	{&4};
			#VAR {gentech[gxp][per]}	{&5};
			#VAR {gentech[rc]}		{&6};
			#VAR {gentech[reset]}		{&8};
			#VAR {gentech[ts][current]}	{&9};
			#VAR {gentech[ts][max]}		{&10};
			#VAR {gentech[ets]}		{&11}
		};
		#REPLACE {mip[gline][1]} {Reset} {R}
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]} {Bias[<%d>%w<099>] Atk(<%d>%d\%<099>) Def(<%d>%d\%<099>) <178>Efield<099>(<178>%dmin<099>) Edna(<178>%dsec<099>) Illum(<%d>%w<099>)} {
			#VAR {gentech[bias][mode]}	{&2};
			#VAR {gentech[bias][atk]}	{&4};
			#VAR {gentech[bias][def]}	{&6};
			#VAR {gentech[efield]}		{&7};
			#VAR {gentech[edna]}		{&8};
			#VAR {gentech[illum]}		{&10};
		}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlineJuggernaut} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {Ammo:\[%d/%d/%d/%d/%d\] <838>Gxp: %d.%d\%<099> Hits: \[%d\] <868>Coffin: %d/%d} {
			#VAR {ammo[1]}			{&1};
			#VAR {ammo[2]}			{&2};
			#VAR {ammo[3]}			{&3};
			#VAR {ammo[4]}			{&4};
			#VAR {ammo[5]}			{&5};
			#VAR {gxp}			{&6.&7};
			#VAR {hits}			{&8};
			#VAR {corpses[coffin]}		{&9};
			#VAR {corpses[coffinsize]}	{&10}
		}
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]} {Nukes: [%d/%d]<099> Reset: [%d\%]} {
			#VAR {nukes}		{&1};
			#VAR {nukes_max}	{&2};
			#VAR {reset}		{&3}
		}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlineKnight} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {Stance: %w | Method: %w | Sec Wind: %d.%d\% | Guild Level: %d | Class: %w | Morale: %d} {
			#VAR {knight[stance]}		{&1};
			#VAR {knight[method]}		{&2};
			#VAR {knight[sw][num]}		{&3.&4};
			#VAR {knight[gl]}		{&5};
			#VAR {knight[class]}		{&6};
			#VAR {knight[morale][num]}	{&7}
		};
		#REPLACE {knight[stance]} {defensive}	{<148>D<088>};
		#REPLACE {knight[stance]} {neutral}	{<138>N<088>};
		#REPLACE {knight[stance]} {offensive}	{<118>O<088>};
		#REPLACE {knight[method]} {melee}	{<118>M<088>};
		#REPLACE {knight[method]} {focus}	{<168>F<088>};
		#REPLACE {knight[method]} {charge}	{<128>C<088>};
		#REPLACE {knight[method]} {standard}	{<138>S<088>};
		#VAR	 {knight[sw][col]}		{@colscale{$knight[sw][num];100}};
		#VAR	 {knight[morale][col]}		{@colscale{$knight[morale][num];5}};
		#REPLACE {mip[gline][1]} { | }				{ };
		#REPLACE {mip[gline][1]} {Stance: %w Method: %w}	{S/M:$knight[stance]/$knight[method]};
		#REPLACE {mip[gline][1]} {Sec Wind: %d.%d}		{SW:$knight[sw][col]};
		#REPLACE {mip[gline][1]} {Guild Level}			{GL};
		#REPLACE {mip[gline][1]} {Class: %w }			{};
		#REPLACE {mip[gline][1]} {Morale: %d}			{M:$knight[morale][col]};
		#REPLACE {mip[gline][1]} {: }				{:}
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]} {[GXN:%d] [HMN:%d.%d\%] [FSN:%d.%d\%] [OFN:%d.%d\%] [DFN:%d.%d\%] [LF:%d] [MOB:%w]} {
			#VAR {knight[gxn]}	{&1};
			#VAR {knight[hmn][num]}	{&2.&3};
			#VAR {knight[fsn][num]}	{&4.&5};
			#VAR {knight[ofn][num]}	{&6.&7};
			#VAR {knight[dfn][num]}	{&8.&9};
			#VAR {knight[lf]}	{&10};
			#VAR {knight[mob]}	{&11}
		};
		#VAR	 {knight[hmn][col]}	{@colscale{$knight[hmn][num];100}};
		#VAR	 {knight[fsn][col]}	{@colscale{$knight[fsn][num];100}};
		#VAR	 {knight[ofn][col]}	{@colscale{$knight[ofn][num];100}};
		#VAR	 {knight[dfn][col]}	{@colscale{$knight[dfn][num];100}};
		#REPLACE {mip[gline][2]} {HMN:%d.%d}		{HMN:$knight[hmn][col]};
		#REPLACE {mip[gline][2]} {FSN:%d.%d}		{FSN:$knight[fsn][col]};
		#REPLACE {mip[gline][2]} {OFN:%d.%d}		{OFN:$knight[ofn][col]};
		#REPLACE {mip[gline][2]} {DFN:%d.%d}		{DFN:$knight[dfn][col]};
		#REPLACE {mip[gline][2]} {[}	{};
		#REPLACE {mip[gline][2]} {]}	{};
		#REPLACE {mip[gline][2]} {MOB}	{E}
	}
}

#ALIAS {.mipProcessGlineNecromancer} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {C:%d}		{#VAR {corpses[inventory]}	{&1}};
		#REGEX {$mip[gline][1]} {Worth:%d}	{#VAR {my[worth]}		{&1}};
		#REGEX {$mip[gline][1]} {Tport:%d/%d}	{
			#VAR {my[ports][current]}	{&1};
			#VAR {my[ports][max]}		{&2}
		};
		#REGEX {$mip[gline][1]} {Sprk:%d/%d}	{
			#VAR {my[sparks][current]}	{&1};
			#VAR {my[sparks][max]}		{&2}
		};
		#REGEX {$mip[gline][1]} {Prot:%wX}	{#VAR {my[prot]}		{&1}};
		#REGEX {$mip[gline][1]} {Circle:%d}	{#VAR {my[gxp]}			{&1}}
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]}	{Undead:%w}	{#VAR {my[undead]}		{&1}};
		#REGEX {$mip[gline][2]}	{SPf:%d/%d}	{
			#VAR {my[sp][fuse][current]}	{&1};
			#VAR {my[sp][fuse][max]}	{&2}
		}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlinePsicorp} {
	#IF {%1 == 1} {
		#NOP
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]} {G2N: %* / %d\%} {
			#FORMAT {my[gxp][tnl]} {%d} {&1};
			#VAR {my[gxp][per]} {&2}
		}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlineSii} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]}	{Regen: %w}	{#VAR {my[regen]}		{&1}}
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]}	{Con:%d/%d}	{
			#VAR {my[control][current]}	{&1};
			#VAR {my[control][max]}		{&2}
		}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}

#ALIAS {.mipProcessGlineBard} {
	#IF {%1 == 1} {
		
	}; #ELSEIF {%1 == 2} {
		
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
}


