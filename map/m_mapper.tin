#class {mapper} {open}

/* Move Event */
#EVENT {MAP ENTER ROOM} {
	#map {get} {ROOMVNUM} {roomvnum};
	#map {get} {ROOMAREA} {roomarea};
	#map {get} {ROOMNAME} {roomname};
	#map {get} {ROOMDESC} {roomdesc};
	#format {roomname_len} {%L} {$roomname};
	#format {roomarea_len} {%L} {$roomarea};
	#format {roomdesc_len} {%L} {$roomdesc};
	#unvar area_mapped;
	#map list {} {} {} {$roomarea} {variable} {area_mapped};
	#var {room_cnt} {&area_mapped[]};
};


#event {MAP EXIT ROOM} {
	#list nouns clear
}

/* Map Follow on Following Others */
#act {%1 leaves %2\.} {
	#var following %1;
	#var foldir %2;

	#switch {"$foldir"} {
		#case {"north"}	{#var foldir n};
		#case {"south"}	{#var foldir s};
		#case {"east"}	{#var foldir e};
		#case {"west"}	{#var foldir w};
		#case {"down"}	{#var foldir d};
		#case {"up"}	{#var foldir u};
	}
}

#act {%1 leaves following %2} {
	#format {follower} {%l} {%1};
	#if {"$follower" == "$world" && %2 == "$following"} {
		#map move $foldir
	}
} {4}

/* Data Grab Trigger */
#var longcap off

#function cartcheck {
	#format cart {%.20s} {%0};
	#if {"$cart" == "                    " ||
	     "$cart" == ""} {
		#return 1
	} {
		#return 0
	}
}

#NOP Room Short with Exits
#act {=S=%1 (%2)%3=S=} {
	#var room %1;
	#var exits %2;
	#if {"$mapping" == "on"} {
		#replace exits {,} {;};
		#foreach {$exits} {eachexit} {#map dig $eachexit}
		#map get {roomexit} {rexit};
		#foreach {$rexit} {eachexit} {
			#map at {$eachexit} {
				#map get {roomarea} {eacharea};
				#if {"$eacharea" == ""} {
					#map set {roomcolor} {<118>}
				}
			}
		};
		#if {$roomname_len == 0} {
			#map set roomname {%1 (%2)}
		};
		#if {$roomarea_len == 0} {
			#map set roomarea {$area};
			#map set roomcolor
		};
		#if {$roomdesc_len == 0} {
			#var longcap on;
			#unvar long;
			#act {%%1} {
				#if {@cartcheck{%%1}} {
						#nop
					} {
						#var long {${long}%%1 }
				}
			} {2}
		};
		#map get {roomvnum} {gonum};
		#map go $gonum
	}
}

#NOP Room Short with No Exits, Lowered Priority
#act {=S=%1%s=S=} {
	#var room %1;
	#if {"$mapping" == "on"} {
		#if {$roomname_len == 0} {
			#map set roomname {%1}
		};
		#if {$roomarea_len == 0} {
			#map set roomarea {$area};
			#map set roomcolor
		};
		#if {$roomdesc_len == 0} {
			#var longcap on;
			#unvar long;
			#act {%%1} {
				#if {@cartcheck{%%1}} {
						#nop
					} {
						#var long {${long}%%1 }
				}
			} {2}
		};
		#map get {roomvnum} {gonum};
		#map go $gonum
	}
} {6}

#act {=X={.*}} {
	#if {"$longcap" == "on"} {
		#var longcap off;
		#unact {%%1};
		#map set roomdesc {$long}
	}
} {1}

#act {AREA NAME: %1 [%2]} {
	#var area %1
}
#act {AREA RATING -> Caution is Advised [Mud]} {
	#var area Mud
}



/* Aliases */
#NOP count the # of rooms mapped
#alias {area_mapped %1} {
	#unvar area_mapped;
	#map list {} {} {} {%1} {variable} {area_mapped};
	#showme {&area_mapped[] rooms mapped.};
}

#NOP Color rooms that have no area set (unexplored)
#alias nacolor {
	#loop 1 20000 {cnt} {
		#map at {$cnt} {
			#map get {roomarea} {cntarea};
			#if {"$cntarea" == ""} {#map set roomcolor <118>}
		}
	};
	#map get {roomvnum} {gonum};
	#map go $gonum
}

#alias {go} {
	#map find {roomnote} %0;
	#path run
}

#alias {mapgo} {#map goto {roomnote} {%0}}

#alias {findhere} {
	#if {"$room" == ""} {
		look
	};
	#map list {roomarea} {$area} {roomname} {$room%*};
	#map list {roomarea} {$area} {roomname} {$room%*} {variable} {findroom};
	#if {&findroom[] == 1} {
		#list {foundroom} {create} {$findroom};
		#map go $foundroom[1]
	}
}


#alias {mapsearch} {
	#show <129>Name matches:<088>;
	#map list {%i%*%0%*};
	#show \n;
	#show <129>Note matches:<088>;
	#map list {} {} {} {} {%i%*%0%*};
}

#alias {mapname %1} {
	#map name %1;
	#map write 3k.map
}

#alias {mapsave} {#map write 3k.map}
#alias {mapon} {
	!brief off yes;
	#map flag static off;
	#var mapstatic 1;
	#var area %1;
	#var mapping on;
}
#alias {mapoff}{
	!brief on yes;
	#map flag static on;
	#unvar mapstatic;
	#unvar mapping;
}
#map flag static on
#unvar mapstatic

#alias {ma} {#map set roomarea {$area}}

#NOP Search Room Nouns (built by MIP)
#alias {sn} {
	#var noun_cnt &nouns[];
	#loop 1 &nouns[] cnt {
		exa $nouns[$cnt];
		search $nouns[$cnt]
	};
	#delay 0.5 {
		#if {$noun_cnt < &nouns[]} {
			#echo {<128>New items found!  Search again!<088>}
		}
	}
}

#alias {mapcon} {
	#ses mapper localhost 4051;
	#ses 1;
}

#alias {mapres} {
	#map read 3k.map;
	#map goto 1;
}

#alias {mm} {
	#map map;
}

/* TMUX Sizing */
#NOP event {SCREEN RESIZE} {rs}


#NOP Death
#act {^You die.$} {#map goto 6247}

#NOP Death Taco
#act {^You shoot through a graceful arc, and feel weightless for the} {#map goto {roomnote} roaches}

#NOP Dragon Realms
#act {^You have to retreat against the onslaught of fire!} {#map move vortex}

#NOP Einstein
#act {^Standing on the bench, you relax and the stagedive through the rift} {#map goto 7039}

#NOP Global Merc Training Theatre
#act {^You have exited the simulation, thank you for playing.} {#map goto 15144}

#NOP Kayos Portal
#act {^You leap into the unknown!} {
	#map get {roomvnum} {num};
	#if {$num == 10278} {
		#map go $plungeroom
	} {
		#var plungeroom $num;
		#map go 10278
	}
}
#act {^You touch the beacon, and a friendly ship belonging to The Vigilant swings by.} {#map go 10278}

#NOP Necromancers
#act {^You tumble down the river and find yourself on a rocky bank inside} {#map goto 7613}

#NOP Science Shuttle
#act {^The captain announces: Welcome to Midway Space Station.$} {exit}
#act {^The captain announces: Welcome to Houston Transport Center.$} {exit2}

#NOP Starcraft:Broodwar
#act {^Door number: 3, Access Code: %1$} {#var starcraft_code %1}

#NOP The Lost Village of Willothorn
#act {^You swim for your life for the surface and end up back where} {#map go 14087}

#NOP Xaxis
#act {^Welcome to Xaxis!} {#map go 15875}
#act {^Here we are folks. Welcome to the Isle of Equinity!} {#map go 15913}

#NOP Wayhaven Ferry
#act {^The ferryman says: Well, we're here!} {#map go 15463}
#act {^The ferryman says: Well, here you are.} {#map go 7354}


/* Blocked Exits */
#act {^You cannot go } {
	#if {$mapstatic} {
		#map undo
	}
}
#act {^You cannot get it up.} {
	#if {$mapstatic} {
		#map undo
	}
}

#NOP ** GUILDS **

#NOP Jedi
#act {^The scanner checks your holocron yet the door remains closed.} {#map undo};
#act {^The droid moves to block your way.} {#map undo};
#act {^Fearing the wrath of the Jedi Council, you decline to enter.} {#map undo};
#act {^The taint of the Dark Side pushes you back.} {#map undo};
#act {^You have not yet become a Jedi Recruiter.} {#map undo};
#act {^You have not yet become a Jedi Knight.} {#map undo};
#act {^You have not yet become an Elder.} {#map undo};
#act {^You have not yet become a Jedi Master.} {#map undo};

#NOP Juggernauts
#act {^The room is locked.} {#map undo}
#act {^Dirk says: This area is for Wolves not } {#map undo}
#act {^Harlow says: You are not allowed here please turn around and leave at once} {#map undo}
#act {^Only members of clan jade falcon can go this way.} {#map undo}

#NOP Bards
#act {^You can't go there!} {#map undo}

#NOP ** AREAS **
#NOP Abbey
#act {^A feeling of fear and dread washes over you, preventing you from going} {#map undo}
#act {^A feeling of dread washes over you, preventing you from going any further east.} {#map undo}

#NOP Body Mansion
#act {^You bump into a locked door.} {#map undo}

#NOP Carnegie
#act {^Woody Allen says: You're going to have to wait for security!} {#map undo}
#act {^Mel Brooks blocks the exit.} {#map undo}
#act {^Jay-Z says: You're going to have to wait for security!} {#map undo}
#act {^Jay-Z says: Where do you think you're going?} {#map undo}
#act {^Jay-Z stops you leaving.} {#map undo}
#act {^Jay-Z blocks the exit.} {#map undo}
#act {^Trixie Hilton blocks the exit.} {#map undo}

#NOP Chaos Cinemaplex
#act {^The movie usher asks for your movie ticket. When you fail to come up with} {#map undo}

#NOP Cove of the Three (Lost Soul)
#act {^A magical force pushes you back, and you hear a voice} {#map undo}

#NOP Crystal Stairway
#act {^The Warrior will not let you invade her home any further.} {#map undo}
#act {^The warrior will not let you pass.} {#map undo}

#NOP Detroit
#act {^Officer yells: Get him, he must be stealing something!!!!} {#map undo}

#NOP Dundee
#act {^The foliage in this part of the swamp is extremely thick and will take} {#map undo}

#NOP Dragon Realms
#act {^You cannot get past the dragon guards.} {#map undo}

#NOP Fallout Shelter
#act {^Core Guard jumps in your way, blocking your path!} {#map undo}

#NOP Ice Fishing
#act {^You are unable to climb the bank here.  It is very steep, and with all} {#map undo}
#act {^You can't go through a solid wall.  Try going around the shack, and} {#map undo}

#NOP Ice Mountains (Verbeeg)
#act {^The magical barrier is impenetrable.$} {#map undo}
#act {^The cryohydra snaps one of its heads at you as you try and approach} {#map undo}

#NOP Land
#act {^You are caught like a fly in a spider web, burning and twisting as} {#map undo}

#NOP Mage Tower
#act {^The guard blocks your passage.} {#map undo}

#NOP Rabbit Fields
#act {^The rabbit prevents you from going that way.} {#map undo}

#NOP Ravenloft
#act {^You try to go down, but suddenly feel more terrified than} {#map undo}
#act {^The trees move together and bar your path!} {#map undo}
#act {^A deathly chill blows from the south, blasting into Inix!} {#map undo}

#NOP Rocky Hill
#act {^Waving their rusty scimitars and growling loudly, the jackalmen} {#map undo}

#NOP SolChem
#act {^The gang member shoves you back.} {#map undo}

#NOP Theatre of Souls
#act {^A closed door blocks your way.} {#map undo}

#NOP Underdark
#act {^The {drow|guard} prevents you from going that way.} {#map undo}
#act {^The troll will not let you pass.} {#map undo}

#NOP Whorehouse
#act {^Doh shoves you backwards with a scowl.} {#map undo}

#NOP Sopem
#act {You search the east wall carefully but you don't see anything strange} {!search east wall};
#act {You finally wake up again after drifting through time and space for what} {!search east wall};
#act {You search the east wall very carefully and notice one of the spikes is} {!exa spike;!push spike};
#act {The floor drops away, causing you to fall!} {!e;!n;!n;!push brick;!w};

#class {mapper} {close}
